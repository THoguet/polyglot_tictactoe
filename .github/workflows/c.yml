name: c

on:
  push:
    paths:
      - "c/**"
      - "**/c.yml"

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: install Valgrind
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: valgrind
          version: 1.0

      - name: Configure CMake
        working-directory: ${{github.workspace}}/c
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        run: mkdir build; cd build; cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ..

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/c/build --config ${{env.BUILD_TYPE}}

      - name: upload build
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: |
            ${{github.workspace}}/c/build/CTestTestfile.cmake
            ${{github.workspace}}/c/build/DartConfiguration.tcl
            ${{github.workspace}}/c/build/game*

  tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: get build
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: chmod+x
        run: chmod +x *

      - name: Test
        # Execute tests defined by the CMake configuration.
        run: ctest -C ${{env.BUILD_TYPE}} -j 10

  mem-check:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: install Valgrind
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: valgrind
          version: 1.0

      - name: get build
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: mem-check
        run: ctest -C ${{env.BUILD_TYPE}} -T memcheck -j 10
